{"version":3,"sources":["Components/CardItem/CardComp.jsx","Components/CardList/Cardlist.jsx","Components/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","Cardlist","monsters","length","map","key","SearchBox","placeholder","handleChange","console","log","type","onChange","App","state","searchFeild","fetch","then","res","json","data","setState","catch","err","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yTAIaA,G,kBAAO,SAACC,GACjB,OACI,yBAAMC,UAAU,YACZ,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,yBAAKJ,UAAU,YAAYD,EAAMI,QAAQE,SCJxCC,EAAW,SAACP,GACrB,OACI,yBAAKC,UAAU,YAEVD,EAAMQ,SAASC,OAAO,GAAKT,EAAMQ,SAASE,KAAI,SAAAN,GAAO,OAAI,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCLzFQ,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAErC,OADAC,QAAQC,IAAIF,EAAa,OAErB,2BACIb,UAAU,YACVgB,KAAK,SACLJ,YAAaA,EACbK,SAAUJ,MC8BPK,E,kDAlCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXZ,SAAU,GACVa,YAAY,IAJF,E,gEAOO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEnB,SAAUkB,OACvCE,OAAM,SAAAC,GAAG,OAAId,QAAQC,IAAIa,Q,+BAEpB,IAAD,SACyBC,KAAKV,MAA7BZ,EADD,EACCA,SAASa,EADV,EACUA,YACXU,EAAiBvB,EAASwB,QAAO,SAAA5B,GAAO,OAC3CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAEnD,OACE,yBAAKhC,UAAU,OACb,0CACA,kBAAC,EAAD,CACAY,YAAY,iBACZC,aAAc,SAAAqB,GACZ,EAAKR,SAAS,CAACN,YAAYc,EAAEC,OAAOC,WAGtC,kBAAC,EAAD,CAAU7B,SAAWuB,S,GA5BXO,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.27cf90f3.chunk.js","sourcesContent":["import React from 'react'\nimport '../CardItem/styles.css'\n\n\nexport const Card = (props) => {\n    return (\n        <div  className='CardItem'>\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <div className='heroName'>{props.monster.name}</div>\n\n        </div>\n\n    )\n}","import React from 'react'\nimport '../CardList/styles.css'\nimport { Card } from '../CardItem/CardComp'\n\nexport const Cardlist = (props) => {\n    return (\n        <div className='cardlist'>\n\n            {props.monsters.length>0 && props.monsters.map(monster => <Card key={monster.id} monster={monster} />\n            )}\n        </div>\n    )\n}","import React from 'react'\nimport './styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    console.log(handleChange,\"han\")\n    return (\n        <input\n            className='searchBox'\n            type='search'\n            placeholder={placeholder}\n            onChange={handleChange}\n        />\n    )\n}","import React from 'react';\nimport './App.css';\nimport { Cardlist } from './Components/CardList/Cardlist'\nimport { SearchBox } from './Components/SearchBox/SearchBox'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      monsters: [],\n      searchFeild:\"\"\n    }\n  }\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => res.json())\n      .then(data => this.setState({ monsters: data }))\n      .catch(err => console.log(err))\n  }\n  render() {\n    const { monsters,searchFeild } =this.state\n    const filteredMonsters=monsters.filter(monster => \n       monster.name.toLowerCase().includes(searchFeild.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>REAL HEROS</h1>\n        <SearchBox \n        placeholder='search monster'\n        handleChange={e => {\n          this.setState({searchFeild:e.target.value}) }}\n        />\n       \n        <Cardlist monsters= {filteredMonsters}/>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}